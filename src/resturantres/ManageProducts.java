/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package resturantres;

import RR_Assets.MyConnection;
import java.sql.*;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author joaqu
 */
public class ManageProducts extends javax.swing.JFrame {

    private ArrayList<String> existingProductPKs;

    /**
     * Creates new form ManageProducts
     */
    public ManageProducts() {
        existingProductPKs = new ArrayList<>();
        initComponents();
        setLocationRelativeTo(null);
    }
    public ArrayList<String> getExistingProductIDs(){
        try{
            Connection con = MyConnection.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select product_ID from products");
            while(rs.next()){
                String checker = rs.getString("product_ID");
                for(int i=0; i<this.existingProductPKs.size(); i++){
                    if(checker.equals(this.existingProductPKs.get(i))){
                        break;
                    }
                }
                this.existingProductPKs.add(checker);
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        return this.existingProductPKs;
    }
    private int fieldChecker(String actionType) {
        if (actionType.equals("Update") && (ProductNameTxt.getText().equals("") || ProductPriceTxt.getText().equals("") || ProductQuantityTxt.getText().equals(""))) {
            return 1;
        } else if (actionType.equals("Save") && (ProductIDTxt.getText().equals("") || ProductNameTxt.getText().equals("") || ProductPriceTxt.getText().equals("") || ProductQuantityTxt.getText().equals(""))) {
            return 2;
        } else {
            getExistingProductIDs();
            for(int i=0; i<this.existingProductPKs.size(); i++){
                if(ProductIDTxt.getText().equals(this.existingProductPKs.get(i)))
                    return 3;
            }
            return 4;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        prodnamelbl = new javax.swing.JLabel();
        prodpricelbl = new javax.swing.JLabel();
        prodquanlbl = new javax.swing.JLabel();
        prodisDishlbl = new javax.swing.JLabel();
        ProductNameTxt = new javax.swing.JTextField();
        ProductPriceTxt = new javax.swing.JTextField();
        ProductQuantityTxt = new javax.swing.JTextField();
        isDishComboBox = new javax.swing.JComboBox<>();
        prodSavebtn = new javax.swing.JButton();
        prodUpdatebtn = new javax.swing.JButton();
        prodDeletebtn = new javax.swing.JButton();
        prodClosebtn = new javax.swing.JButton();
        prodIDlbl = new javax.swing.JLabel();
        ProductIDTxt = new javax.swing.JTextField();
        iconLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(1280, 720));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Franklin Gothic Book", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Manage Products");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 0, -1, -1));

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "product_ID", "name", "price", "quantity", "isDish"
            }
        ));
        productTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productTableMouseClicked(evt);
            }
        });
        productTable.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                productTableComponentShown(evt);
            }
        });
        jScrollPane1.setViewportView(productTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 46, 710, 1034));

        prodnamelbl.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        prodnamelbl.setText("Name");
        getContentPane().add(prodnamelbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 200, -1, -1));

        prodpricelbl.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        prodpricelbl.setText("Price");
        getContentPane().add(prodpricelbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 310, -1, -1));

        prodquanlbl.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        prodquanlbl.setText("Quantity");
        getContentPane().add(prodquanlbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 420, -1, -1));

        prodisDishlbl.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        prodisDishlbl.setText("isDish");
        getContentPane().add(prodisDishlbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 530, -1, -1));

        ProductNameTxt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        ProductNameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductNameTxtActionPerformed(evt);
            }
        });
        getContentPane().add(ProductNameTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 240, 310, -1));

        ProductPriceTxt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        getContentPane().add(ProductPriceTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 350, 310, -1));

        ProductQuantityTxt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        getContentPane().add(ProductQuantityTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 460, 310, -1));

        isDishComboBox.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        isDishComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));
        isDishComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isDishComboBoxActionPerformed(evt);
            }
        });
        getContentPane().add(isDishComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 570, 310, -1));

        prodSavebtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        prodSavebtn.setText("Save");
        prodSavebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prodSavebtnActionPerformed(evt);
            }
        });
        getContentPane().add(prodSavebtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 640, -1, -1));

        prodUpdatebtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        prodUpdatebtn.setText("Update");
        prodUpdatebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prodUpdatebtnActionPerformed(evt);
            }
        });
        getContentPane().add(prodUpdatebtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 640, -1, -1));

        prodDeletebtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        prodDeletebtn.setText("Delete");
        prodDeletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prodDeletebtnActionPerformed(evt);
            }
        });
        getContentPane().add(prodDeletebtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 640, -1, -1));

        prodClosebtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        prodClosebtn.setText("Close");
        prodClosebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prodClosebtnActionPerformed(evt);
            }
        });
        getContentPane().add(prodClosebtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 640, -1, -1));

        prodIDlbl.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        prodIDlbl.setText("ID");
        getContentPane().add(prodIDlbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 90, 37, -1));

        ProductIDTxt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        getContentPane().add(ProductIDTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 130, 310, -1));

        iconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1920x1080-bright-lavender-solid-color-background.jpg"))); // NOI18N
        iconLabel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                iconLabelComponentShown(evt);
            }
        });
        getContentPane().add(iconLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(-70, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void isDishComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isDishComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_isDishComboBoxActionPerformed

    private void ProductNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductNameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProductNameTxtActionPerformed

    private void prodClosebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prodClosebtnActionPerformed
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_prodClosebtnActionPerformed

    private void prodSavebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prodSavebtnActionPerformed
        // TODO add your handling code here:
        String ID = ProductIDTxt.getText();
        String name = ProductNameTxt.getText();
        String price = ProductPriceTxt.getText();
        String quantity = ProductQuantityTxt.getText();
        String isDish = (String) isDishComboBox.getSelectedItem();
        if (fieldChecker("Save") == 2){
            JOptionPane.showMessageDialog(null, "All fields must be inputted.");
        } 
        else if(fieldChecker("Save") == 3){
            JOptionPane.showMessageDialog(null, "Repeating product_IDs are not allowed.");
        } 
        else {
            try {
                Connection con = MyConnection.getCon();
                PreparedStatement ps = con.prepareStatement("insert into products (product_ID, product_name, product_price, product_quantity, isDish) values(?,?,?,?,?)");
                ps.setString(1, ID);
                ps.setString(2, name);
                ps.setString(3, price);
                ps.setString(4, quantity);
                ps.setString(5, isDish);
                ps.executeUpdate();
                this.getExistingProductIDs();
                JOptionPane.showMessageDialog(null, "Product has been successfully added.");
                setVisible(false);
                new ManageProducts().setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_prodSavebtnActionPerformed

    private void productTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productTableMouseClicked
        // TODO add your handling code here:
        getExistingProductIDs();
        int index = productTable.getSelectedRow();
        TableModel model = productTable.getModel();

        String id = model.getValueAt(index, 0).toString();
        ProductIDTxt.setText(id);

        String name = model.getValueAt(index, 1).toString();
        ProductNameTxt.setText(name);

        String price = model.getValueAt(index, 2).toString();
        ProductPriceTxt.setText(price);

        String quantity = model.getValueAt(index, 3).toString();
        ProductQuantityTxt.setText(quantity);
        
        String isDish = model.getValueAt(index, 4).toString();
        isDishComboBox.removeAllItems();
        if(isDish.equals("Yes")){
            isDishComboBox.addItem("Yes");
            isDishComboBox.addItem("No");
        }
        else{
            isDishComboBox.addItem("No");
            isDishComboBox.addItem("Yes");
        }
        ProductIDTxt.setEditable(false);
        prodSavebtn.setEnabled(false);
        prodUpdatebtn.setEnabled(true);
    }//GEN-LAST:event_productTableMouseClicked

    private void prodUpdatebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prodUpdatebtnActionPerformed
        // TODO add your handling code here:
        String ID = ProductIDTxt.getText();
        String name = ProductNameTxt.getText();
        String price = ProductPriceTxt.getText();
        String quantity = ProductQuantityTxt.getText();
        String isDish = (String) isDishComboBox.getSelectedItem();
        if (fieldChecker("Update") == 1) {
            JOptionPane.showMessageDialog(null, "All necessary fields must be inputted.");
        } 
        else if(fieldChecker("Update") == 3){
            JOptionPane.showMessageDialog(null, "Repeating product_IDs are not allowed.");
        }
        else{
            try {
                Connection con = MyConnection.getCon();
                PreparedStatement ps = con.prepareStatement("update products set product_name=?,product_price=?,product_quantity=?,isDish=? where product_ID=?");
                ps.setString(1, name);
                ps.setString(2, price);
                ps.setString(3, quantity);
                ps.setString(4, isDish);
                ps.setString(5, ID);
                ps.executeUpdate();
                this.getExistingProductIDs();
                JOptionPane.showMessageDialog(null, "Product has been successfully updated.");
                setVisible(false);
                new ManageProducts().setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_prodUpdatebtnActionPerformed

    private void prodDeletebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prodDeletebtnActionPerformed
        // TODO add your handling code here:
        String id = ProductIDTxt.getText();
        if(id.equals("")){
            JOptionPane.showMessageDialog(null, "Please enter the product_ID you wish to remove.");
        }
        
        int idChecker = 0;
        for(int i=0; i<this.existingProductPKs.size(); i++){
            if(id.equals(this.existingProductPKs.get(i))){
                int j = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this item?", "Warning", JOptionPane.YES_NO_OPTION);
                if( j == JOptionPane.YES_OPTION){
                    try{
                        Connection con = MyConnection.getCon();
                        PreparedStatement ps = con.prepareStatement("delete from products where product_ID=?");
                        ps.setString(1, id);
                        ps.executeUpdate();
                        JOptionPane.showMessageDialog(null, "Product has been successfully deleted.");
                        setVisible(false);
                        this.existingProductPKs.remove(i);
                        new ManageProducts().setVisible(true);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e);
                      }       
                    idChecker = 1;
                }
                break;
            }
        }
        if(idChecker == 0){
            JOptionPane.showMessageDialog(null, "There are no products with this ID. Please enter an existing one.");
        }
    }//GEN-LAST:event_prodDeletebtnActionPerformed

    private void iconLabelComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_iconLabelComponentShown

    }//GEN-LAST:event_iconLabelComponentShown

    private void productTableComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_productTableComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_productTableComponentShown

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) productTable.getModel();
        try {
            Connection con = MyConnection.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select * from products");
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString("product_ID"), rs.getString("product_name"), rs.getString("product_price"), rs.getString("product_quantity"), rs.getString("isDish")});
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_formComponentShown

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageProducts().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ProductIDTxt;
    private javax.swing.JTextField ProductNameTxt;
    private javax.swing.JTextField ProductPriceTxt;
    private javax.swing.JTextField ProductQuantityTxt;
    private javax.swing.JLabel iconLabel;
    private javax.swing.JComboBox<String> isDishComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton prodClosebtn;
    private javax.swing.JButton prodDeletebtn;
    private javax.swing.JLabel prodIDlbl;
    private javax.swing.JButton prodSavebtn;
    private javax.swing.JButton prodUpdatebtn;
    private javax.swing.JLabel prodisDishlbl;
    private javax.swing.JLabel prodnamelbl;
    private javax.swing.JLabel prodpricelbl;
    private javax.swing.JLabel prodquanlbl;
    private javax.swing.JTable productTable;
    // End of variables declaration//GEN-END:variables
}
