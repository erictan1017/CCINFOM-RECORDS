/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package resturantres;

import RR_Assets.MyConnection;
import RR_Assets.RMTransactionforReport;
import java.sql.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Vector;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author VINCE
 */
public class ManageReservations extends javax.swing.JFrame {

    /**
     * Creates new form ManageReservations
     */
    public ManageReservations() {
        initComponents();
        updateTable();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    private void updateTable()  {
        int c;
        try{
            Connection con = MyConnection.getCon();
            PreparedStatement ps = con.prepareStatement("select * from reservations order by date DESC");
            ResultSet rs = ps.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();
            c = rsmd.getColumnCount();
            
            DefaultTableModel df = (DefaultTableModel)reservations_t.getModel();
            df.setRowCount(0);
            
            while (rs.next()){
                Vector v2 = new Vector();
                for(int i=1; i<c; i++){
                    v2.add(rs.getString("reservation_ID"));
                    v2.add(rs.getString("account_ID"));
                    v2.add(rs.getString("date"));
                    v2.add(rs.getString("seatCount"));
                    v2.add(rs.getString("staff_ID"));
                    
                }
                df.addRow(v2);
                
            }
        } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
        }
    }
    
    
    private int searchDateEdit(String key, int index, int n)    {
        DefaultTableModel df = (DefaultTableModel)reservations_t.getModel();
        for (int i = 0; i < n; i++) {
            if (i != index) {
                String date = (String) df.getValueAt(i, 2); // Column 2 for "date"
                if (date.equals(key)) {
                    return i; // Return the matching index
                }
            }
        }
        return -1;
    }
    
    private int searchDateAdd(String key, int n)    {
        //DefaultTableModel df = (DefaultTableModel)reservations_t.getModel();
        int left = 0, right = n - 1;
        while(left <= right){
            int mid = left + (right - left) / 2;
            String datemid = (String)reservations_t.getValueAt(mid, 2);
            int comparison = datemid.compareTo(key);
            
            if(comparison == 0)
                return mid;
            if(comparison > 0){
                left = mid + 1;
            }
            else{ 
                right = mid - 1;
            }
        }
        return -1;
    }    
    
    private int searchID(int id, int n){
        try{
            DefaultTableModel idTableModel = new DefaultTableModel(); 
            idTableModel.addColumn("reservation_ID");
            Connection con = MyConnection.getCon();
            PreparedStatement ps = con.prepareStatement("select reservation_id from reservations order by reservation_id");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) { 
                Vector<Object> idVector = new Vector<>(); 
                idVector.add(rs.getInt("reservation_ID")); 
                idTableModel.addRow(idVector); 
            }
        
            
            int left = 0, right = n - 1;
            while(left <= right){
                int mid = left + (right - left) / 2;
            
                if(id == (int)idTableModel.getValueAt(mid, 0))
                    return mid;
                if(id > (int)idTableModel.getValueAt(mid, 0)){
                    left = mid + 1;
                }
                else{ 
                    right = mid - 1;
                }
            }
        } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
        }
        return -1;
    }
    
        private int searchStaff(int id){
        try{
            DefaultTableModel staffs_tm = new DefaultTableModel(); 
            staffs_tm.addColumn("staff_ID");
            Connection con = MyConnection.getCon();
            PreparedStatement ps = con.prepareStatement("select staff_id from staffs");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) { 
                Vector<Object> idVector = new Vector<>(); 
                idVector.add(rs.getInt("staff_ID")); 
                staffs_tm.addRow(idVector); 
            }
        
            
            int left = 0;
            int right = staffs_tm.getRowCount() - 1;
            while(left <= right){
                int mid = left + (right - left) / 2;
            
                if(id == (int)staffs_tm.getValueAt(mid, 0))
                    return mid;
                if(id > (int)staffs_tm.getValueAt(mid, 0)){
                    left = mid + 1;
                }
                else{ 
                    right = mid - 1;
                }
            }
        } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
        }
        return -1;
    }
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        r_label = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        reservations_t = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        reservationid_tf = new javax.swing.JTextField();
        accountid_tf = new javax.swing.JTextField();
        date_tf = new javax.swing.JTextField();
        seatcount_tf = new javax.swing.JTextField();
        staffid_tf = new javax.swing.JTextField();
        add_btn = new javax.swing.JButton();
        edit_btn = new javax.swing.JButton();
        delete_btn = new javax.swing.JButton();
        close_btn = new javax.swing.JButton();
        orders_btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(java.awt.Color.magenta);

        r_label.setFont(new java.awt.Font("Franklin Gothic Book", 1, 24)); // NOI18N
        r_label.setText("Manage Reservations");

        reservations_t.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "reservation_ID", "account_ID", "date", "seatCount", "staff_ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        reservations_t.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reservations_tMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(reservations_t);

        jLabel1.setFont(new java.awt.Font("Franklin Gothic Book", 0, 24)); // NOI18N
        jLabel1.setText("Reservation ID");

        jLabel2.setFont(new java.awt.Font("Franklin Gothic Book", 0, 24)); // NOI18N
        jLabel2.setText("Date (YYYY-MM-DD)");

        jLabel3.setFont(new java.awt.Font("Franklin Gothic Book", 0, 24)); // NOI18N
        jLabel3.setText("Account ID");

        jLabel4.setFont(new java.awt.Font("Franklin Gothic Book", 0, 24)); // NOI18N
        jLabel4.setText("Number of Seats:");

        jLabel5.setFont(new java.awt.Font("Franklin Gothic Book", 0, 24)); // NOI18N
        jLabel5.setText("Staff ID");

        reservationid_tf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        reservationid_tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservationid_tfActionPerformed(evt);
            }
        });

        accountid_tf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        accountid_tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accountid_tfActionPerformed(evt);
            }
        });

        date_tf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        date_tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                date_tfActionPerformed(evt);
            }
        });

        seatcount_tf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        seatcount_tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seatcount_tfActionPerformed(evt);
            }
        });

        staffid_tf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        staffid_tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staffid_tfActionPerformed(evt);
            }
        });

        add_btn.setText("Add");
        add_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_btnActionPerformed(evt);
            }
        });

        edit_btn.setText("Edit");
        edit_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edit_btnActionPerformed(evt);
            }
        });

        delete_btn.setText("Delete");
        delete_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_btnActionPerformed(evt);
            }
        });

        close_btn.setText("Close");
        close_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                close_btnActionPerformed(evt);
            }
        });

        orders_btn.setText("View Reservation Orders");
        orders_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orders_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(staffid_tf)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(add_btn)
                                .addGap(18, 18, 18)
                                .addComponent(edit_btn)
                                .addGap(18, 18, 18)
                                .addComponent(delete_btn)
                                .addGap(18, 18, 18)
                                .addComponent(close_btn)
                                .addGap(31, 31, 31)
                                .addComponent(orders_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 330, Short.MAX_VALUE))
                            .addComponent(reservationid_tf, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(accountid_tf, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(date_tf)
                            .addComponent(seatcount_tf, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(r_label)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(r_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reservationid_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(accountid_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(date_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(seatcount_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(staffid_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(add_btn)
                            .addComponent(edit_btn)
                            .addComponent(delete_btn)
                            .addComponent(close_btn)
                            .addComponent(orders_btn))
                        .addGap(12, 12, 12))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void reservationid_tfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservationid_tfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reservationid_tfActionPerformed

    private void accountid_tfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accountid_tfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_accountid_tfActionPerformed

    private void date_tfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_date_tfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_date_tfActionPerformed

    private void seatcount_tfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seatcount_tfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_seatcount_tfActionPerformed

    private void staffid_tfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staffid_tfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_staffid_tfActionPerformed

    private void add_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_btnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel df = (DefaultTableModel)reservations_t.getModel();
        String reservation_id = reservationid_tf.getText();
        String account_id = accountid_tf.getText();
        String date = date_tf.getText();
        String seatcount = seatcount_tf.getText();
        String staff_id = staffid_tf.getText();
        if(searchID(Integer.parseInt(reservation_id), (int)df.getRowCount()) != -1){
            JOptionPane.showMessageDialog(null, "Reservation ID already exists.");
        }
        else if(searchDateAdd(date, reservations_t.getRowCount()) != -1){
            JOptionPane.showMessageDialog(null, "Reservation already booked at that date.");
        }
        else if(searchStaff(Integer.parseInt(staff_id)) == -1){
            JOptionPane.showMessageDialog(null, "Staff ID does not exist.");
        }
        else{
            try{
                Connection con = MyConnection.getCon();
                PreparedStatement ps = con.prepareStatement("insert into reservations (reservation_ID, account_ID, date, seatCount, staff_ID) values(?,?,?,?,?)");
                ps.setString(1, reservation_id);
                ps.setString(2, account_id);
                ps.setString(3, date);
                ps.setString(4, seatcount);
                ps.setString(5, staff_id);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Reservation has been successfully added.");
                updateTable();
                reservationid_tf.setText("");
                accountid_tf.setText("");
                date_tf.setText("");
                seatcount_tf.setText("");
                staffid_tf.setText("");
                reservationid_tf.requestFocus();
            } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_add_btnActionPerformed

    private void reservations_tMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reservations_tMouseClicked
        // TODO add your handling code here:
        DefaultTableModel df = (DefaultTableModel)reservations_t.getModel();
        int selected_index = reservations_t.getSelectedRow();
        
        reservationid_tf.setText((String)df.getValueAt(selected_index, 0));
        accountid_tf.setText((String)df.getValueAt(selected_index, 1));
        date_tf.setText((String)df.getValueAt(selected_index, 2));
        seatcount_tf.setText((String)df.getValueAt(selected_index, 3));
        staffid_tf.setText((String)df.getValueAt(selected_index, 4));
        
    }//GEN-LAST:event_reservations_tMouseClicked

    private void edit_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edit_btnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel df = (DefaultTableModel)reservations_t.getModel();
        int selected_index = reservations_t.getSelectedRow();
        
        
        
        try{
            //int id = (int) df.getValueAt(selected_index, 0);
            String reservation_id = reservationid_tf.getText();
            String account_id = accountid_tf.getText();
            String date = date_tf.getText();
            String seatcount = seatcount_tf.getText();
            String staff_id = staffid_tf.getText();
            // check if id inputted exists
            if(searchID(Integer.parseInt(reservation_id), (int)reservations_t.getRowCount()) == -1){
                JOptionPane.showMessageDialog(null, "Reservation ID does not exist.");
            }
            // check date if already reserved
            else if(searchDateEdit(date, selected_index, reservations_t.getRowCount()) != -1){
                JOptionPane.showMessageDialog(null, "Reservation already booked at that date.");
            }
            else{
                Connection con = MyConnection.getCon();
                PreparedStatement ps = con.prepareStatement("update reservations set account_ID=?, date=?, seatCount=?, staff_ID=? where reservation_id=?");

                ps.setString(1, account_id);
                ps.setString(2, date);
                ps.setString(3, seatcount);
                ps.setString(4, staff_id);
                ps.setString(5, reservation_id);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Reservation has been successfully updated.");
                updateTable();
                reservationid_tf.setText("");
                accountid_tf.setText("");
                date_tf.setText("");
                seatcount_tf.setText("");
                staffid_tf.setText("");
                reservationid_tf.requestFocus();
            }
        } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_edit_btnActionPerformed

    private void delete_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_btnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel df = (DefaultTableModel)reservations_t.getModel();
        int selected_index = reservations_t.getSelectedRow();
        
        try{
            //int id = (int) df.getValueAt(selected_index, 0);
            String reservation_id = reservationid_tf.getText();
            String date = date_tf.getText();
            if(searchID(Integer.parseInt(reservation_id), (int)reservations_t.getRowCount()) == -1){
                JOptionPane.showMessageDialog(null, "Reservation ID does not exist.");
            }
            else{
                int dialogresult = JOptionPane.showConfirmDialog(null, String.format("Do you want to delete Reservation ID %s on date %s?", reservation_id, date), "Warning", JOptionPane.YES_NO_OPTION);
                if(dialogresult == JOptionPane.YES_OPTION){
                    Connection con = MyConnection.getCon();
                    PreparedStatement ps = con.prepareStatement("delete from reservations where reservation_id=?");
                    ps.setString(1, reservation_id);
                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Reservation has been deleted.");
                    updateTable();
                    reservationid_tf.setText("");
                    accountid_tf.setText("");
                    date_tf.setText("");
                    seatcount_tf.setText("");
                    staffid_tf.setText("");
                    reservationid_tf.requestFocus();
                }
            }
        } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_delete_btnActionPerformed

    private void close_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_close_btnActionPerformed
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_close_btnActionPerformed

    private void orders_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orders_btnActionPerformed
        // TODO add your handling code here:
        new ManageOrders().setVisible(true);
    }//GEN-LAST:event_orders_btnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageReservations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageReservations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageReservations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageReservations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageReservations().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField accountid_tf;
    private javax.swing.JButton add_btn;
    private javax.swing.JButton close_btn;
    private javax.swing.JTextField date_tf;
    private javax.swing.JButton delete_btn;
    private javax.swing.JButton edit_btn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton orders_btn;
    private javax.swing.JLabel r_label;
    private javax.swing.JTextField reservationid_tf;
    private javax.swing.JTable reservations_t;
    private javax.swing.JTextField seatcount_tf;
    private javax.swing.JTextField staffid_tf;
    // End of variables declaration//GEN-END:variables
}
