/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package resturantres;

import RR_Assets.MyConnection;
import java.sql.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.util.Locale;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author joaqu
 */
public class ManageInventory extends javax.swing.JFrame {

    private ArrayList<String> existingProductPKs;
    //private ArrayList<ProductReport> existingProductReports;

    /**
     * Creates new form ManageProducts
     */
    public ManageInventory() {
        existingProductPKs = new ArrayList<>();
        initComponents();
        setLocationRelativeTo(null);
    }
    private ArrayList<String> getExistingProductIDs(){
        try{
            Connection con = MyConnection.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select product_ID from products");
            while(rs.next()){
                String checker = rs.getString("product_ID");
                for(int i=0; i<this.existingProductPKs.size(); i++){
                    if(checker.equals(this.existingProductPKs.get(i))){
                        break;
                    }
                }
                this.existingProductPKs.add(checker);
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        return this.existingProductPKs;
    }
    private int fieldChecker(String actionType) {
        if (actionType.equals("Update") && (ProductNameTxt.getText().equals("") || ProductPriceTxt.getText().equals("") || ProductQuantityTxt.getText().equals(""))) {
            return 1;
        } else if (actionType.equals("Save") && (ProductIDTxt.getText().equals("") || ProductNameTxt.getText().equals("") || ProductPriceTxt.getText().equals("") || ProductQuantityTxt.getText().equals(""))) {
            return 2;
        } else {
            getExistingProductIDs();
            for(int i=0; i<this.existingProductPKs.size(); i++){
                if(ProductIDTxt.getText().equals(this.existingProductPKs.get(i)))
                    return 3;
            }
            return 4;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ManageProductslbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        prodnamelbl = new javax.swing.JLabel();
        prodpricelbl = new javax.swing.JLabel();
        prodquanlbl = new javax.swing.JLabel();
        ProductNameTxt = new javax.swing.JTextField();
        ProductPriceTxt = new javax.swing.JTextField();
        ProductQuantityTxt = new javax.swing.JTextField();
        prodSavebtn = new javax.swing.JButton();
        prodUpdatebtn = new javax.swing.JButton();
        prodDeletebtn = new javax.swing.JButton();
        prodClosebtn = new javax.swing.JButton();
        prodIDlbl = new javax.swing.JLabel();
        ProductIDTxt = new javax.swing.JTextField();
        prodTransactionbtn = new javax.swing.JButton();
        prodReportbtn = new javax.swing.JButton();
        prodViewProductslbl = new javax.swing.JLabel();
        ProductExecuteTxt = new javax.swing.JTextField();
        prodExecutebtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        executeResultsTextArea = new javax.swing.JTextArea();
        prodTransactionlbl = new javax.swing.JLabel();
        dateofTransactionTxt = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        prodReports = new javax.swing.JLabel();
        reportMonthlbl = new javax.swing.JLabel();
        reportMonthTxt = new javax.swing.JTextField();
        reportYearlbl = new javax.swing.JLabel();
        reportYearTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(1135, 1211));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        ManageProductslbl.setFont(new java.awt.Font("Franklin Gothic Book", 1, 24)); // NOI18N
        ManageProductslbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ManageProductslbl.setText("Manage Products");
        ManageProductslbl.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "name", "price", "quantity"
            }
        ));
        productTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productTableMouseClicked(evt);
            }
        });
        productTable.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                productTableComponentShown(evt);
            }
        });
        jScrollPane1.setViewportView(productTable);

        prodnamelbl.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        prodnamelbl.setText("Name");

        prodpricelbl.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        prodpricelbl.setText("Price");

        prodquanlbl.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        prodquanlbl.setText("Quantity");

        ProductNameTxt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        ProductNameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductNameTxtActionPerformed(evt);
            }
        });

        ProductPriceTxt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        ProductQuantityTxt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        prodSavebtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        prodSavebtn.setText("Save");
        prodSavebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prodSavebtnActionPerformed(evt);
            }
        });

        prodUpdatebtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        prodUpdatebtn.setText("Update");
        prodUpdatebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prodUpdatebtnActionPerformed(evt);
            }
        });

        prodDeletebtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        prodDeletebtn.setText("Delete");
        prodDeletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prodDeletebtnActionPerformed(evt);
            }
        });

        prodClosebtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        prodClosebtn.setText("Close");
        prodClosebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prodClosebtnActionPerformed(evt);
            }
        });

        prodIDlbl.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        prodIDlbl.setText("ID");

        ProductIDTxt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        prodTransactionbtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        prodTransactionbtn.setText("Begin Transaction");
        prodTransactionbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prodTransactionbtnActionPerformed(evt);
            }
        });

        prodReportbtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        prodReportbtn.setText("Generate Report");
        prodReportbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prodReportbtnActionPerformed(evt);
            }
        });

        prodViewProductslbl.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        prodViewProductslbl.setText("View Products");

        ProductExecuteTxt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        prodExecutebtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        prodExecutebtn.setText("Execute ");
        prodExecutebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prodExecutebtnActionPerformed(evt);
            }
        });

        executeResultsTextArea.setColumns(20);
        executeResultsTextArea.setRows(5);
        jScrollPane2.setViewportView(executeResultsTextArea);

        prodTransactionlbl.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        prodTransactionlbl.setText("Date of Transaction");

        dateofTransactionTxt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        prodReports.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        prodReports.setText("Reports(Per Day)");

        reportMonthlbl.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        reportMonthlbl.setText("Month");

        reportMonthTxt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        reportYearlbl.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        reportYearlbl.setText("Year");

        reportYearTxt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 710, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ProductIDTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(prodnamelbl)
                            .addComponent(ProductNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(prodpricelbl)
                            .addComponent(ProductPriceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(prodquanlbl)
                            .addComponent(ProductQuantityTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(prodSavebtn)
                                .addGap(8, 8, 8)
                                .addComponent(prodUpdatebtn)
                                .addGap(8, 8, 8)
                                .addComponent(prodDeletebtn)
                                .addGap(8, 8, 8)
                                .addComponent(prodClosebtn))
                            .addComponent(prodIDlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(prodReports)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(reportMonthlbl)
                                    .addComponent(reportYearlbl)
                                    .addComponent(reportYearTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(reportMonthTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addComponent(prodReportbtn))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(580, 580, 580)
                                .addComponent(ManageProductslbl))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(prodViewProductslbl))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(prodExecutebtn))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(prodTransactionlbl))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(prodTransactionbtn)
                                            .addComponent(dateofTransactionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(ProductExecuteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ManageProductslbl)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(prodIDlbl)
                            .addComponent(prodReports))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ProductIDTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(prodnamelbl)
                                .addGap(15, 15, 15)
                                .addComponent(ProductNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(prodpricelbl)
                                .addGap(15, 15, 15)
                                .addComponent(ProductPriceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(prodquanlbl)
                                .addGap(15, 15, 15)
                                .addComponent(ProductQuantityTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(prodSavebtn)
                                    .addComponent(prodUpdatebtn)
                                    .addComponent(prodDeletebtn)
                                    .addComponent(prodClosebtn)))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(prodViewProductslbl)
                                .addGap(15, 15, 15)
                                .addComponent(ProductExecuteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)
                                .addComponent(prodExecutebtn)
                                .addGap(43, 43, 43)
                                .addComponent(prodTransactionlbl)
                                .addGap(18, 18, 18)
                                .addComponent(dateofTransactionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(prodTransactionbtn))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(reportMonthlbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(reportMonthTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(prodReportbtn)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(reportYearlbl)
                                        .addGap(18, 18, 18)
                                        .addComponent(reportYearTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(242, 242, 242)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ProductNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductNameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProductNameTxtActionPerformed

    private void prodClosebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prodClosebtnActionPerformed
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_prodClosebtnActionPerformed

    private void prodSavebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prodSavebtnActionPerformed
        // TODO add your handling code here:
        String ID = ProductIDTxt.getText();
        String name = ProductNameTxt.getText();
        String price = ProductPriceTxt.getText();
        String quantity = ProductQuantityTxt.getText();
        if (fieldChecker("Save") == 2){
            JOptionPane.showMessageDialog(null, "All fields must be inputted.");
        } 
        else if(fieldChecker("Save") == 3){
            JOptionPane.showMessageDialog(null, "Repeating product_IDs are not allowed.");
        } 
        else {
            try {
                Connection con = MyConnection.getCon();
                PreparedStatement ps = con.prepareStatement("insert into products (product_ID, product_name, product_price, product_quantity) values(?,?,?,?)");
                ps.setString(1, ID);
                ps.setString(2, name);
                ps.setString(3, price);
                ps.setString(4, quantity);
                ps.executeUpdate();
                this.getExistingProductIDs();
                JOptionPane.showMessageDialog(null, "Product has been successfully added.");
                setVisible(false);
                new ManageInventory().setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_prodSavebtnActionPerformed

    private void productTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productTableMouseClicked
        // TODO add your handling code here:
        getExistingProductIDs();
        int index = productTable.getSelectedRow();
        TableModel model = productTable.getModel();

        String id = model.getValueAt(index, 0).toString();
        ProductIDTxt.setText(id);

        String name = model.getValueAt(index, 1).toString();
        ProductNameTxt.setText(name);

        String price = model.getValueAt(index, 2).toString();
        ProductPriceTxt.setText(price);

        String quantity = model.getValueAt(index, 3).toString();
        ProductQuantityTxt.setText(quantity);
        
        ProductIDTxt.setEditable(false);
        prodSavebtn.setEnabled(false);
        prodUpdatebtn.setEnabled(true);
    }//GEN-LAST:event_productTableMouseClicked

    private void prodUpdatebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prodUpdatebtnActionPerformed
        // TODO add your handling code here:
        String ID = ProductIDTxt.getText();
        String name = ProductNameTxt.getText();
        String price = ProductPriceTxt.getText();
        String quantity = ProductQuantityTxt.getText();
        if (fieldChecker("Update") == 1) {
            JOptionPane.showMessageDialog(null, "All necessary fields must be inputted.");
        } 
        else if(fieldChecker("Update") == 3){
            JOptionPane.showMessageDialog(null, "Repeating product_IDs are not allowed.");
        }
        else{
            try {
                Connection con = MyConnection.getCon();
                PreparedStatement ps = con.prepareStatement("update products set product_name=?,product_price=?,product_quantity=? where product_ID=?");
                ps.setString(1, name);
                ps.setString(2, price);
                ps.setString(3, quantity);
                ps.setString(4, ID);
                ps.executeUpdate();
                this.getExistingProductIDs();
                JOptionPane.showMessageDialog(null, "Product has been successfully updated.");
                setVisible(false);
                new ManageInventory().setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_prodUpdatebtnActionPerformed

    private void prodDeletebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prodDeletebtnActionPerformed
        // TODO add your handling code here:
        String id = ProductIDTxt.getText();
        if(id.equals("")){
            JOptionPane.showMessageDialog(null, "Please enter the product_ID you wish to remove.");
        }
        
        int idChecker = 0;
        for(int i=0; i<this.existingProductPKs.size(); i++){
            if(id.equals(this.existingProductPKs.get(i))){
                int j = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this item?", "Warning", JOptionPane.YES_NO_OPTION);
                if( j == JOptionPane.YES_OPTION){
                    try{
                        Connection con = MyConnection.getCon();
                        PreparedStatement ps = con.prepareStatement("delete from products where product_ID=?");
                        ps.setString(1, id);
                        ps.executeUpdate();
                        JOptionPane.showMessageDialog(null, "Product has been successfully deleted.");
                        setVisible(false);
                        this.existingProductPKs.remove(i);
                        new ManageInventory().setVisible(true);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e);
                      }       
                    idChecker = 1;
                }
                break;
            }
        }
        if(idChecker == 0){
            JOptionPane.showMessageDialog(null, "There are no products with this ID. Please enter an existing one.");
        }
    }//GEN-LAST:event_prodDeletebtnActionPerformed

    private void productTableComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_productTableComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_productTableComponentShown

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) productTable.getModel();
        try {
            Connection con = MyConnection.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select * from products");
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString("product_ID"), rs.getString("product_name"), rs.getString("product_price"), rs.getString("product_quantity")});
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_formComponentShown

    private void prodTransactionbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prodTransactionbtnActionPerformed
        // TODO add your handling code here:
        /*insert all transaction steps
        if(dateofTransactionTxt.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Please enter a date for the transaction.");
        }
        else{
          String transDate = dateofTransactionTxt.getText(); 
          DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MMMM d, yyyy", Locale.ENGLISH);
          LocalDate date = LocalDate.parse(transDate, formatter);
          try{
              Connection con = MyConnection.getCon();
              Statement st = con.createStatement();
              ResultSet rs = st.executeQuery("");
          }
          catch(Exception e){
              JOptionPane.showMessageDialog(null,e);
        }
          
        }*/
    }//GEN-LAST:event_prodTransactionbtnActionPerformed

    private void prodReportbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prodReportbtnActionPerformed
        // TODO add your handling code here:
        String month = reportMonthTxt.getText();
        String year = reportYearTxt.getText();
        //if (dateofReport.getMonthValue() == month && dateofReport.getYear() == year) then print the report
    }//GEN-LAST:event_prodReportbtnActionPerformed

    private void prodExecutebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prodExecutebtnActionPerformed
        // TODO add your handling code here:
        if(ProductExecuteTxt.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Please enter a query first.");
        }
        else{
            String query = ProductExecuteTxt.getText();
            try{
                Connection con = MyConnection.getCon();
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(query);
                JOptionPane.showMessageDialog(null, "Query has been executed.");
                String result = "product_ID" + " " + "product_name" + " " + "product_price" + " " + "product_quantity" + "\nvalues\n";
                while(rs.next()){
                    result += rs.getString("product_ID") + " " + rs.getString("product_name") + " " + rs.getString("product_price") + " " + rs.getString("product_quantity") + "\n";
                }
                executeResultsTextArea.setText(result);
                ProductExecuteTxt.setText("");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null,e);
            }
        }
    }//GEN-LAST:event_prodExecutebtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable(){
            public void run() {
                new ManageInventory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ManageProductslbl;
    private javax.swing.JTextField ProductExecuteTxt;
    private javax.swing.JTextField ProductIDTxt;
    private javax.swing.JTextField ProductNameTxt;
    private javax.swing.JTextField ProductPriceTxt;
    private javax.swing.JTextField ProductQuantityTxt;
    private javax.swing.JTextField dateofTransactionTxt;
    private javax.swing.JTextArea executeResultsTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton prodClosebtn;
    private javax.swing.JButton prodDeletebtn;
    private javax.swing.JButton prodExecutebtn;
    private javax.swing.JLabel prodIDlbl;
    private javax.swing.JButton prodReportbtn;
    private javax.swing.JLabel prodReports;
    private javax.swing.JButton prodSavebtn;
    private javax.swing.JButton prodTransactionbtn;
    private javax.swing.JLabel prodTransactionlbl;
    private javax.swing.JButton prodUpdatebtn;
    private javax.swing.JLabel prodViewProductslbl;
    private javax.swing.JLabel prodnamelbl;
    private javax.swing.JLabel prodpricelbl;
    private javax.swing.JLabel prodquanlbl;
    private javax.swing.JTable productTable;
    private javax.swing.JTextField reportMonthTxt;
    private javax.swing.JLabel reportMonthlbl;
    private javax.swing.JTextField reportYearTxt;
    private javax.swing.JLabel reportYearlbl;
    // End of variables declaration//GEN-END:variables
}
