/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package restaurantres;

import RR_Assets.MyConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author AP-COOP
 */
public class RawMaterials extends javax.swing.JFrame {
    
    private final ArrayList<String> existingPOID;
    private final ArrayList<String> existingSPID;
    private final ArrayList<String> existingRMID;
    private final ArrayList<String> existingPDID;

    /**
     * Creates new form RawMaterials
     */
    public RawMaterials() {
        existingPOID = new ArrayList<>();
        existingSPID = new ArrayList<>();
        existingRMID = new ArrayList<>();
        existingPDID = new ArrayList<>();
        
        initComponents();
        setLocationRelativeTo(null);
        getExistingPOID();
        getExistingSPID();
        getExistingRMID();
        getExistingPDID();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        RawMaterials = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pOrdersTable = new javax.swing.JTable();
        PODetails = new javax.swing.JLabel();
        pOrderAdd = new javax.swing.JButton();
        pOrderRemove = new javax.swing.JButton();
        UpdateRecord = new javax.swing.JLabel();
        POID1 = new javax.swing.JLabel();
        supplierID = new javax.swing.JLabel();
        purchaseDate = new javax.swing.JLabel();
        POIDText1 = new javax.swing.JTextField();
        SPIDText = new javax.swing.JTextField();
        pDateText = new javax.swing.JTextField();
        PurchaseOrders = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pDetailsTable = new javax.swing.JTable();
        POID2 = new javax.swing.JLabel();
        POIDText2 = new javax.swing.JTextField();
        RMID = new javax.swing.JLabel();
        RMIDText = new javax.swing.JTextField();
        quantity = new javax.swing.JLabel();
        qtyText = new javax.swing.JTextField();
        pDetailsAdd = new javax.swing.JButton();
        pDetailsRemove = new javax.swing.JButton();
        pDetailsUpdate = new javax.swing.JButton();
        close = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        stotalText = new javax.swing.JTextField();
        bg = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(950, 950));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        RawMaterials.setFont(new java.awt.Font("Franklin Gothic Medium", 1, 24)); // NOI18N
        RawMaterials.setText("Raw Materials");
        getContentPane().add(RawMaterials, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 10, -1, -1));

        pOrdersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PO_ID", "supplier_ID", "purchaseDate", "grandTotal"
            }
        ));
        jScrollPane1.setViewportView(pOrdersTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, -1, 370));

        PODetails.setFont(new java.awt.Font("Franklin Gothic Medium", 1, 18)); // NOI18N
        PODetails.setText("PO Details");
        getContentPane().add(PODetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 510, -1, -1));

        pOrderAdd.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        pOrderAdd.setText("Add ");
        pOrderAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pOrderAddActionPerformed(evt);
            }
        });
        getContentPane().add(pOrderAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 400, 100, -1));

        pOrderRemove.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        pOrderRemove.setText("Remove");
        pOrderRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pOrderRemoveActionPerformed(evt);
            }
        });
        getContentPane().add(pOrderRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 400, 100, -1));

        UpdateRecord.setFont(new java.awt.Font("Franklin Gothic Medium", 1, 18)); // NOI18N
        UpdateRecord.setText("Update Record");
        getContentPane().add(UpdateRecord, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 80, 130, -1));

        POID1.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        POID1.setText("PO_ID");
        getContentPane().add(POID1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 110, 60, -1));

        supplierID.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        supplierID.setText("supplier_ID");
        getContentPane().add(supplierID, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 190, 150, -1));

        purchaseDate.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        purchaseDate.setText("purchaseDate");
        getContentPane().add(purchaseDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 270, 150, -1));
        getContentPane().add(POIDText1, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 140, 220, -1));
        getContentPane().add(SPIDText, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 220, 220, -1));
        getContentPane().add(pDateText, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 300, 220, -1));

        PurchaseOrders.setFont(new java.awt.Font("Franklin Gothic Medium", 1, 18)); // NOI18N
        PurchaseOrders.setText("Purchase Orders");
        getContentPane().add(PurchaseOrders, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 77, -1, -1));

        pDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PO_ID", "RM_ID", "quantity", "subtotalPrice"
            }
        ));
        jScrollPane2.setViewportView(pDetailsTable);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 540, -1, 370));

        POID2.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        POID2.setText("PO_ID");
        getContentPane().add(POID2, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 560, 60, -1));
        getContentPane().add(POIDText2, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 590, 220, -1));

        RMID.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        RMID.setText("RM_ID");
        getContentPane().add(RMID, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 640, 150, -1));
        getContentPane().add(RMIDText, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 670, 220, -1));

        quantity.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        quantity.setText("quantity");
        getContentPane().add(quantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 720, 150, -1));
        getContentPane().add(qtyText, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 750, 220, -1));

        pDetailsAdd.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        pDetailsAdd.setText("Add");
        pDetailsAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pDetailsAddActionPerformed(evt);
            }
        });
        getContentPane().add(pDetailsAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 880, -1, -1));

        pDetailsRemove.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        pDetailsRemove.setText("Remove");
        pDetailsRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pDetailsRemoveActionPerformed(evt);
            }
        });
        getContentPane().add(pDetailsRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 880, -1, -1));

        pDetailsUpdate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        pDetailsUpdate.setText("Update");
        pDetailsUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pDetailsUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(pDetailsUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 880, -1, -1));

        close.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        close.setText("Close");
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });
        getContentPane().add(close, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 880, -1, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("subtotalPrice");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 800, -1, -1));
        getContentPane().add(stotalText, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 830, 220, -1));

        bg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1920x1080-bright-lavender-solid-color-background.jpg"))); // NOI18N
        getContentPane().add(bg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 960, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private ArrayList<String> getExistingPOID(){
        try{
            Connection con = MyConnection.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select PO_ID from purchaseorder");
            int i;
            while(rs.next()){
                String checker = rs.getString("PO_ID");
                for(i=0; i<this.existingPOID.size(); i++){
                    if(checker.equals(this.existingPOID.get(i))){
                        break;
                    }
                }
                if(i == this.existingPOID.size())
                    this.existingPOID.add(checker);
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        return this.existingPOID;
    }
    
    private ArrayList<String> getExistingSPID(){
        try{
            Connection con = MyConnection.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select supplier_ID from purchaseorder");
            int i;
            while(rs.next()){
                String checker = rs.getString("supplier_ID");
                for(i=0; i<this.existingSPID.size(); i++){
                    if(checker.equals(this.existingSPID.get(i))){
                        break;
                    }
                }
                if(i == this.existingSPID.size())
                    this.existingSPID.add(checker);
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        return this.existingSPID;
    }
    
    private ArrayList<String> getExistingRMID(){
        try{
            Connection con = MyConnection.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select rm_ID from rawmaterial");
            int i;
            while(rs.next()){
                String checker = rs.getString("rm_ID");
                for(i=0; i<this.existingRMID.size(); i++){
                    if(checker.equals(this.existingRMID.get(i))){
                        break;
                    }
                }
                if(i == this.existingRMID.size())
                    this.existingRMID.add(checker);
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        return this.existingRMID;
    }
    
    private ArrayList<String> getExistingPDID(){
        try{
            Connection con = MyConnection.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select PO_ID from podetails");
            int i;
            while(rs.next()){
                String checker = rs.getString("PO_ID");
                for(i=0; i<this.existingPDID.size(); i++){
                    if(checker.equals(this.existingPDID.get(i))){
                        break;
                    }
                }
                if(i == this.existingPDID.size())
                    this.existingPDID.add(checker);
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        return this.existingPDID;
    }
    
    private void computeGrandTotal(String POID) {
        try {
            Connection con = MyConnection.getCon();
            PreparedStatement ps = con.prepareStatement(
                "SELECT COALESCE(SUM(quantity * subtotalPrice), 0) AS grandTotal FROM podetails WHERE PO_ID = ?"
            );
            ps.setString(1, POID);
            ResultSet rs = ps.executeQuery();
        
            if (rs.next()) {
                double grandTotal = rs.getDouble("grandTotal");
              
                PreparedStatement updatePs = con.prepareStatement(
                    "UPDATE purchaseorder SET grandTotal = ? WHERE PO_ID = ?"
                );
                updatePs.setDouble(1, grandTotal);
                updatePs.setString(2, POID);
                updatePs.executeUpdate();
            
                JOptionPane.showMessageDialog(null, "Grand total updated successfully for PO_ID: " + POID);
            }
        
            rs.close();
            ps.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }  
    
    private int pOrderChecker(String actionType) {
        int duplicateChecker = 0;
        int existingSP_ID = 0;
        int existingPD_ID = 0;
        
        if (actionType.equals("Add") && (POIDText1.getText().equals("") || SPIDText.getText().equals("") || pDateText.getText().equals(""))) {
            return 2;
        } else {
            
            if (actionType.equals("Add")){
                for(int i=0; i<this.existingPOID.size(); i++){
                    if(POIDText1.getText().equals(this.existingPOID.get(i))){
                        duplicateChecker = 1;
                    }    
                }
            }
            
            if (actionType.equals("Add")){
                for(int i=0; i<this.existingSPID.size(); i++){
                    if(SPIDText.getText().equals(this.existingSPID.get(i))){ 
                        existingSP_ID = 1; 
                    }        
                }       
            }
            
            
            if(actionType.equals("Remove")){
                for(int i=0; i<this.existingPDID.size(); i++){
                    if(POIDText1.getText().equals(this.existingPDID.get(i))){ 
                        existingPD_ID = 1; 
                    }      
                }
            }
    
            if (duplicateChecker == 1){
                return 3;
            } else if (actionType.equals("Add") && existingSP_ID == 0){
                return 4;
            } else if (duplicateChecker == 0 && existingSP_ID == 1){
                return 5;
            } else if (existingPD_ID == 0){
                return 6;
            }
            return 7;
        }
    }
    
    private int pDetailsChecker(String actionType) {
        
        int existingPO_ID = 0;
        int duplicateChecker = 0;
        int existingRM_ID = 0;
        
        if (actionType.equals("Add") && (POIDText2.getText().equals("") || RMIDText.getText().equals("") || qtyText.getText().equals("") || stotalText.getText().equals(""))) {
            return 2;
        } else {      
            for(int i=0; i<this.existingPOID.size(); i++){
                if(POIDText2.getText().equals(this.existingPOID.get(i))){
                    existingPO_ID = 1;
                }            
            }
            
            for(int i=0; i<this.existingPDID.size(); i++){
                if(POIDText2.getText().equals(this.existingPDID.get(i))){ 
                    duplicateChecker = 1; 
                }      
            }
            
            for(int i=0; i<this.existingRMID.size(); i++){
                if(RMIDText.getText().equals(this.existingRMID.get(i))){ 
                    existingRM_ID = 1; 
                }      
            }
            
            if (duplicateChecker == 1){
                return 3;
            } else if (existingRM_ID == 0) {
                return 4;
            } else if (existingRM_ID == 1 && duplicateChecker == 0 && existingPO_ID == 1) {
                return 5;
            } else if (existingPO_ID == 0){
                return 6;
            }           
            return 7;
        }       
    }
    
    private int pdUpdateChecker(String actionType) {
        
        int existingPO_ID = 0;  
        int existingPD_ID = 0;
        
        if (actionType.equals("Update") && (POIDText2.getText().equals("") || qtyText.getText().equals("") || stotalText.getText().equals(""))) {
            return 2;
        } else {      
            for(int i=0; i<this.existingPOID.size(); i++){
                if(POIDText2.getText().equals(this.existingPOID.get(i))){
                    existingPO_ID = 1;
                } 
            }
            for(int i=0; i<this.existingPDID.size(); i++){
                if(POIDText2.getText().equals(this.existingPDID.get(i))){ 
                    existingPD_ID = 1; 
                }      
            }
            
            if(existingPO_ID == 0){
                return 3;
            } else if (existingPD_ID == 0){
                return 4;
            } else if (existingPO_ID == 1 && existingPD_ID == 1){
                return 5;
            }
            return 6;
        }       
    }
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        DefaultTableModel pOrders = (DefaultTableModel)pOrdersTable.getModel();
        DefaultTableModel pDetails = (DefaultTableModel)pDetailsTable.getModel();
        
        pOrders.setRowCount(0);
        pDetails.setRowCount(0);
        
        try {
            Connection con = MyConnection.getCon();
            Statement st1 = con.createStatement();
            Statement st2 = con.createStatement();
            
            ResultSet rs1 = st1.executeQuery("select * from purchaseorder");
            while (rs1.next()) {
                pOrders.addRow(new Object[]{rs1.getString("PO_ID"), rs1.getString("supplier_ID"), rs1.getString("purchaseDate"), rs1.getString("grandTotal")});
                
            }
            rs1.close();
            
            ResultSet rs2 = st2.executeQuery("select * from podetails");
            while (rs2.next()){
                pDetails.addRow(new Object[]{rs2.getString("PO_ID"), rs2.getString("rm_ID"), rs2.getString("quantity"), rs2.getString("subtotalPrice")});
            }
            rs2.close();
            
            st1.close();
            st2.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_formComponentShown

    private void pOrderAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pOrderAddActionPerformed
        // TODO add your handling code here:
        String POID = POIDText1.getText();
        String SPID = SPIDText.getText();
        String pDate = pDateText.getText();
        
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); 
        dateFormat.setLenient(false); 
        
        try {   
            dateFormat.parse(pDate);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Invalid date format. Please enter a date in the format yyyy-MM-dd.");
            return; 
        }
    
        if (pOrderChecker("Add") == 2){
            JOptionPane.showMessageDialog(null, "All fields must be inputted.");
        } 
        else if (pOrderChecker("Add") == 3){
            JOptionPane.showMessageDialog(null, "No duplicate PO IDs.");
        }
        else if (pOrderChecker("Add") == 4){
            JOptionPane.showMessageDialog(null, "The supplier ID does not exist.");
        }
        else {
            try {
                Connection con = MyConnection.getCon();
                PreparedStatement ps = con.prepareStatement("insert into purchaseorder (PO_ID, supplier_ID, purchaseDate, grandTotal) values(?,?,?,0)");
                ps.setString(1, POID);
                ps.setString(2, SPID);
                ps.setString(3, pDate);
                ps.executeUpdate();
                this.getExistingPOID();
                JOptionPane.showMessageDialog(null, "Purchase order has been successfully added.");
                setVisible(false);
                new RawMaterials().setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }      
    }//GEN-LAST:event_pOrderAddActionPerformed

    private void pOrderRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pOrderRemoveActionPerformed
        // TODO add your handling code here:
        String id = POIDText1.getText();
        
        if (pOrderChecker("Remove") == 6){
            int idChecker = 0;
            for(int i=0; i<this.existingPOID.size(); i++){
                if(id.equals(this.existingPOID.get(i))){
                    int j = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this item?", "Warning", JOptionPane.YES_NO_OPTION);
                    if( j == JOptionPane.YES_OPTION){
                        try{
                            Connection con = MyConnection.getCon();
                            PreparedStatement ps = con.prepareStatement("delete from purchaseorder where PO_ID=?");
                            ps.setString(1, id);
                            ps.executeUpdate();
                            JOptionPane.showMessageDialog(null, "Purchase order has been successfully deleted.");
                            setVisible(false);
                            this.existingPOID.remove(i);
                            new RawMaterials().setVisible(true);
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e);
                        }       
                        idChecker = 1;
                    } else {
                        JOptionPane.showMessageDialog(null, "Purchase order deletion has been cancelled.");
                        idChecker = 1;
                    }
                break;
                }
            }
            if(idChecker == 0){
                JOptionPane.showMessageDialog(null, "There are no purchase orders with this ID. Please enter an existing one.");
            }
        }
        else {
            JOptionPane.showMessageDialog(null, "This purchase order cannot be deleted because a corresponding po details exist.");
        }     
    }//GEN-LAST:event_pOrderRemoveActionPerformed

    private void pDetailsAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pDetailsAddActionPerformed
        // TODO add your handling code here:
        String POID = POIDText2.getText();
        String rmID = RMIDText.getText();
        String qty = qtyText.getText();
        String stotal = stotalText.getText();
        
        if (pDetailsChecker("Add") == 2){
            JOptionPane.showMessageDialog(null, "All fields must be inputted.");
        } 
        else if (pDetailsChecker("Add") == 3){
            JOptionPane.showMessageDialog(null, "No duplicate PO IDs.");
        }
        else if (pDetailsChecker("Add") == 4){
            JOptionPane.showMessageDialog(null, "The RM ID does not exist.");
        }
        else if (pDetailsChecker("Add") == 6){
            JOptionPane.showMessageDialog(null, "The PO ID does not exist.");
        }
        else if (pDetailsChecker("Add") == 5){
            try {
                Connection con = MyConnection.getCon();
                PreparedStatement ps = con.prepareStatement("insert into podetails (PO_ID, rm_ID, quantity, subtotalPrice) values(?,?,?,?)");
                ps.setString(1, POID);
                ps.setString(2, rmID);
                ps.setString(3, qty);
                ps.setString(4, stotal);
                ps.executeUpdate();
                this.getExistingPDID();
                computeGrandTotal(POID);
                JOptionPane.showMessageDialog(null, "Purchase order details has been successfully added."); 
                setVisible(false);
                new RawMaterials().setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_pDetailsAddActionPerformed

    private void pDetailsRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pDetailsRemoveActionPerformed
        // TODO add your handling code here:
        String id = POIDText2.getText();
        
        int idChecker = 0;
        for(int i=0; i<this.existingPOID.size(); i++){
            if(id.equals(this.existingPOID.get(i))){
                int j = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this item?", "Warning", JOptionPane.YES_NO_OPTION);
                if( j == JOptionPane.YES_OPTION){
                    try{
                        Connection con = MyConnection.getCon();
                        PreparedStatement ps = con.prepareStatement("delete from podetails where PO_ID=?");
                        ps.setString(1, id);
                        ps.executeUpdate();
                        computeGrandTotal(id);
                        JOptionPane.showMessageDialog(null, "Purchase order details has been successfully deleted.");
                        setVisible(false);
                        this.existingPOID.remove(i);
                        new RawMaterials().setVisible(true);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e);
                      }       
                    idChecker = 1;
                } else {
                    JOptionPane.showMessageDialog(null, "Purchase order details deletion has been cancelled.");
                    idChecker = 1;
                }
                break;
            }
        }
        if(idChecker == 0){
            JOptionPane.showMessageDialog(null, "There are no purchase order details with this ID. Please enter an existing one.");
        }
    }//GEN-LAST:event_pDetailsRemoveActionPerformed

    private void pDetailsUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pDetailsUpdateActionPerformed
        // TODO add your handling code here:
        String POID = POIDText2.getText();  
        String qty = qtyText.getText();
        String stotal = stotalText.getText();
        
        if (pdUpdateChecker("Update") == 2){
            JOptionPane.showMessageDialog(null, "PO ID and quantity fields must be inputted.");
        } else if (pdUpdateChecker("Update") == 3 || pdUpdateChecker("Update") == 4){
            JOptionPane.showMessageDialog(null, "The PO ID does not exist.");
        } 
        else {
            try {
                Connection con = MyConnection.getCon();
                PreparedStatement ps = con.prepareStatement("update podetails set quantity = ?, subtotalPrice = ? where PO_ID = ?");                        
                ps.setString(1, qty);
                ps.setString(2, stotal);
                ps.setString(3, POID);
                ps.executeUpdate();
                this.getExistingPDID();
                computeGrandTotal(POID);
                JOptionPane.showMessageDialog(null, "Purchase order details has been successfully updated.");
                setVisible(false);
                new RawMaterials().setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_pDetailsUpdateActionPerformed

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_closeActionPerformed
  
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RawMaterials.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RawMaterials.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RawMaterials.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RawMaterials.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RawMaterials().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel PODetails;
    private javax.swing.JLabel POID1;
    private javax.swing.JLabel POID2;
    private javax.swing.JTextField POIDText1;
    private javax.swing.JTextField POIDText2;
    private javax.swing.JLabel PurchaseOrders;
    private javax.swing.JLabel RMID;
    private javax.swing.JTextField RMIDText;
    private javax.swing.JLabel RawMaterials;
    private javax.swing.JTextField SPIDText;
    private javax.swing.JLabel UpdateRecord;
    private javax.swing.JLabel bg;
    private javax.swing.JButton close;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField pDateText;
    private javax.swing.JButton pDetailsAdd;
    private javax.swing.JButton pDetailsRemove;
    private javax.swing.JTable pDetailsTable;
    private javax.swing.JButton pDetailsUpdate;
    private javax.swing.JButton pOrderAdd;
    private javax.swing.JButton pOrderRemove;
    private javax.swing.JTable pOrdersTable;
    private javax.swing.JLabel purchaseDate;
    private javax.swing.JTextField qtyText;
    private javax.swing.JLabel quantity;
    private javax.swing.JTextField stotalText;
    private javax.swing.JLabel supplierID;
    // End of variables declaration//GEN-END:variables
}
